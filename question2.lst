


ARM Macro Assembler    Page 1 


    1 00000000                 AREA             Pointers, CODE, READONLY
    2 00000000                 ENTRY
    3 00000000         
    4 00000000 E28F107C        ADR              r1, STRING  ; Register R1 point
                                                            s to beginning of S
                                                            TRING
    5 00000004 E28F2090        ADR              r2, EoS     ; Register R2 point
                                                            s to EoS
    6 00000008         
    7 00000008 E4524001        LDRB             r4, [r2], #-1 ; Decrement R2 to
                                                             to put right after
                                                             STRING
    8 0000000C         
    9 0000000C         
   10 0000000C E4D13001 
                       LOOP    LDRB             r3, [r1], #1 ; Increment r3 up 
                                                            by 1
   11 00000010 E4524001        LDRB             r4, [r2], #-1 ; Decrement r4 do
                                                            wn by 1
   12 00000014         
   13 00000014 E3530000 
                       check   CMP              r3, #0x00   ; Checking if R3 is
                                                             at 
   14 00000018 0A000017        BEQ              pal         ; If Palindrome
   15 0000001C         
   16 0000001C E3530041        CMP              r3, #'A'    ; Comapre r3 to 'A'
                                                            
   17 00000020 BA000001        BLT              range1      ; Continue if r3 is
                                                             not uppercase
   18 00000024 A353005A        CMPGE            r3, #'Z'    ; Compare r3 to 'Z'
                                                            
   19 00000028 D2833020        ADDLE            r3, r3, #0x20 ; Making r3 lower
                                                            ase
   20 0000002C         
   21 0000002C E3530061 
                       range1  CMP              r3, #'a'    ; Comparing r3 to '
                                                            a' to see if non al
                                                            phabetic
   22 00000030 B4D13001        LDRLTB           r3, [r1], #1 ; Skipping to next
                                                             byte if non alpha
   23 00000034 BAFFFFF6        BLT              check       ; Looping back to c
                                                            heck EoS
   24 00000038 E353007A        CMP              r3, #'z'    ; Comparing r3 to '
                                                            z'
   25 0000003C C4D13001        LDRGTB           r3, [r1], #1 ; Skipping to next
                                                             byte if non alpha
   26 00000040 CAFFFFF3        BGT              check       ; Looping back to c
                                                            heck EoS
   27 00000044         
   28 00000044 E3540041        CMP              r4, #'A'    ; Comparing r4 to '
                                                            A'
   29 00000048 BA000001        BLT              range2      ; Continue if r4 is
                                                             not uppercase
   30 0000004C A354005A        CMPGE            r4, #'Z'    ; Compare r4 to 'Z'
                                                            
   31 00000050 D2844020        ADDLE            r4, r4, #0x20 ; Making r4 lower
                                                            acse
   32 00000054         
   33 00000054 E3540061 



ARM Macro Assembler    Page 2 


                       range2  CMP              r4, #'a'    ; Comparing r4 to '
                                                            a' to see if non al
                                                            phabetic
   34 00000058 B4524001        LDRLTB           r4, [r2], #-1 ; Skipping to nex
                                                            t byte if non alpha
                                                            
   35 0000005C BAFFFFEC        BLT              check       ; Looping back to c
                                                            heck EoS
   36 00000060 E354007A        CMP              r4, #'z'    ; Comparing r4 to '
                                                            z'
   37 00000064 C4524001        LDRGTB           r4, [r2], #-1 ; Skipping to nex
                                                            t byte if non alpha
                                                            
   38 00000068 CAFFFFE9        BGT              check       ; Looping back to c
                                                            heck EoS
   39 0000006C         
   40 0000006C E1530004        CMP              r3, r4      ; Comparing the 2 c
                                                            hars
   41 00000070 13A00002        MOVNE            r0, #2      ; If not equal, not
                                                             palindrome
   42 00000074 1A000001        BNE              finish      ; Exit this loop to
                                                             end program
   43 00000078         
   44 00000078 EAFFFFE3        B                LOOP        ; Main loop
   45 0000007C         
   46 0000007C         
   47 0000007C         
   48 0000007C E3A00001 
                       pal     MOV              r0, #1      ; Setting r0 to 1 i
                                                            f palindrome
   49 00000080 E1A00000 
                       finish  MOV              r0, r0      ; Branch here to te
                                                            rminate the program
                                                            
   50 00000084         
   51 00000084 48 65 20 
              6C 69 76 
              65 64 20 
              61 73 20 
              61 20 64 
              65 76 69 
              6C 2C 20 
              65 68 3F STRING  DCB              "He lived as a devil, eh?" 
                                                            ;string 
   52 0000009C 00      EoS     DCB              0x00        ;end of string 
   53 0000009D         
   54 0000009D                 END
Command Line: --debug --xref --bi --apcs=interwork --depend=.\question2.d -o.\q
uestion2.o -IC:\Keil\ARM\RV31\INC -IC:\Keil\ARM\CMSIS\Include --predefine="__EV
AL SETA 1" --list=.\question2.lst question2.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

EoS 0000009C

Symbol: EoS
   Definitions
      At line 52 in file question2.s
   Uses
      At line 5 in file question2.s
Comment: EoS used once
LOOP 0000000C

Symbol: LOOP
   Definitions
      At line 10 in file question2.s
   Uses
      At line 44 in file question2.s
Comment: LOOP used once
Pointers 00000000

Symbol: Pointers
   Definitions
      At line 1 in file question2.s
   Uses
      None
Comment: Pointers unused
STRING 00000084

Symbol: STRING
   Definitions
      At line 51 in file question2.s
   Uses
      At line 4 in file question2.s
Comment: STRING used once
check 00000014

Symbol: check
   Definitions
      At line 13 in file question2.s
   Uses
      At line 23 in file question2.s
      At line 26 in file question2.s
      At line 35 in file question2.s
      At line 38 in file question2.s

finish 00000080

Symbol: finish
   Definitions
      At line 49 in file question2.s
   Uses
      At line 42 in file question2.s
Comment: finish used once
pal 0000007C

Symbol: pal
   Definitions
      At line 48 in file question2.s
   Uses
      At line 14 in file question2.s
Comment: pal used once



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols

range1 0000002C

Symbol: range1
   Definitions
      At line 21 in file question2.s
   Uses
      At line 17 in file question2.s
Comment: range1 used once
range2 00000054

Symbol: range2
   Definitions
      At line 33 in file question2.s
   Uses
      At line 29 in file question2.s
Comment: range2 used once
9 symbols
340 symbols in table
